/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author sanjana
 */
 
import java.io.*;
import java.util.*;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import java.awt.Color;
import javax.swing.JEditorPane;
import javax.swing.JScrollPane;
import java.awt.Container;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Document;
import javax.swing.text.Highlighter;
import javax.swing.text.JTextComponent;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
 
public class Pairwise_Result extends javax.swing.JFrame {

    /**
     * Creates new form Pairwise_Result
     */
    static MyHighlightPainter myHighlightPainter = new MyHighlightPainter(Color.yellow); 
    private static File f1,f2;
    private static boolean userBusyScrolling;
    public static String path;
    
    public Pairwise_Result(String Path) {
    path=Path.replace("INPUT_FILES/","");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jEditorPane1 = new javax.swing.JEditorPane();
        jScrollPane1 = new javax.swing.JScrollPane(jEditorPane1, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        jEditorPane2 = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane(jEditorPane2, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        
        jEditorPane1.setEditable(false);
        jEditorPane2.setEditable(false);
        

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("PAIRWISE RESULT");

        jButton1.setText("Choose File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            JFileChooser chooser1=new  JFileChooser();
        	int returnVal1 = chooser1.showOpenDialog(null);
        	if(returnVal1 == JFileChooser.APPROVE_OPTION) 
        	{
        		f1 = chooser1.getSelectedFile();
        		jLabel2.setText(f1.getPath());
        		
      		}
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Choose File");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            JFileChooser chooser2=new  JFileChooser();
        	int returnVal2 = chooser2.showOpenDialog(null);
        	if(returnVal2 == JFileChooser.APPROVE_OPTION) 
        	{
        		f2 = chooser2.getSelectedFile();
        		jLabel3.setText(f2.getPath());
      		}
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Display");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            
           		try
        		{
        			String pair=f1.getPath()+" "+f2.getPath();
        			String pair_reverse=f2.getPath()+" "+f1.getPath();
        			String result="";
        			String type="";
        			String Block="";
        			String Files_1,Files_2;
        			
        			BufferedReader br=new BufferedReader(new FileReader(path+"DATABASE_FILES/Final_Report.txt"));
        			while((result=br.readLine())!=null)
        			{
        				if(result.contains(pair)||result.contains(pair_reverse))
        				{
        					if(result.contains("Verbatim"))
        						type="Verbatim Copying";
        					else if(result.contains("Whitespace"))
        						type="Formatting White space";
        					else if(result.contains("Comments"))
        						type="Formatting Comments";
        					else if(result.contains("Formatting"))
        						type="Formatting White space & Comments";
        					else if(result.contains("ID"))
        						type="Renaming Identifiers & Changing Data types";
        					else if(result.contains("Block"))
        						type="Code Blocks Reordering";
        					else if(result.contains("Structure"))
        						type="Structural Similarity";
        				}
        			}
        			jLabel1.setText(type);
        			
        			if(type.equals("Code Blocks Reordering"))
        			{
        			
        				BufferedReader b=new BufferedReader(new FileReader(path+"DATABASE_FILES/BlockCopy_Result.txt"));
        				while((Block=b.readLine())!=null)
        				{
        					if(Block.contains(pair))
        					{
        						Block=b.readLine();
        						Block=Block.replace(",","");
        						String[] PairBlock=Block.split("-");
        						PairBlock[0]=PairBlock[0].replace("[","");
        						PairBlock[0]=PairBlock[0].replace("]","");
        						PairBlock[1]=PairBlock[1].replace("[","");
        						PairBlock[1]=PairBlock[1].replace("]","");
        						
        						String[] Lines_1=PairBlock[0].split(" ");
        						String[] Lines_2=PairBlock[1].split(" ");
        						
        						int n=Lines_1.length;
        						int m=Lines_2.length;
        						
        						int[] Line_1=new int[n];
        						for(int i=0;i<n;i++)
        						{
        							Line_1[i]=Integer.parseInt(Lines_1[i]);
        						}
        						
        						int[] Line_2=new int[m];
        						for(int j=0;j<m;j++)
        						{
        							Line_2[j]=Integer.parseInt(Lines_2[j]);
        						}
        						
        						File_Convert fc = new File_Convert();
        						Files_1=fc.readFile(f1.getPath());
        						Files_2=fc.readFile(f2.getPath());
        						
        						String[] File_1=Files_1.split("\n");
        						String[] File_2=Files_2.split("\n");
        						
        						jLabel2.setText(f1.getPath());
        						jLabel3.setText(f2.getPath());
        						
        						
        						BufferedReader br_1=new BufferedReader(new FileReader(f1));
        						String st_1="";
        						String app_1="";
        						while((st_1=br_1.readLine())!=null)
        						{
            						app_1=app_1+st_1+"\n";
        						}
        						jEditorPane1.setText(app_1);
        						
        						
        						for(int x=0;x<File_1.length;x++)
        						{
        							
        							int f1=ContainElement(Line_1,x+1);
        							if(f1==1)
        							{
        								highlight(jEditorPane1,File_1[x]);
        							}
        							
        						}
        						
        					
        						BufferedReader br_2=new BufferedReader(new FileReader(f2));
        						String st_2="";
        						String app_2="";
        						while((st_2=br_2.readLine())!=null)
        						{
            						app_2=app_2+st_2+"\n";
        						}
        						jEditorPane2.setText(app_2);
        						
        						
        						
        						
        						for(int y=0;y<File_2.length;y++)
        						{
        							
        							int f2=ContainElement(Line_2,y+1);
        							if(f2==1)
        							{
        								highlight(jEditorPane2,File_2[y]);
        							}
        							
        						}
        						
        						       						      						
        					}	
        				}
        				
        			}
        			else 
        			{
        				BufferedReader br1=new BufferedReader(new FileReader(f1));
        				String st1="";
        				String app1="";
        				while((st1=br1.readLine())!=null)
        				{
            				app1=app1+st1+"\n";
        				}
        				jEditorPane1.setText(app1);
        				
        				BufferedReader br2=new BufferedReader(new FileReader(f2));
        				String st2="";
        				String app2="";
        				while((st2=br2.readLine())!=null)
        				{
            				app2=app2+st2+"\n";
        				}
        				jEditorPane2.setText(app2);
        			}
        			
        		}
        		catch(Exception e) { }
            
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Close");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            dispose();
                jButton4ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jEditorPane1);

        jScrollPane2.setViewportView(jEditorPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(170, 170, 170)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(194, 194, 194))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(316, 316, 316)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(435, 435, 435)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(55, 55, 55)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(51, 51, 51)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 24, Short.MAX_VALUE)))
                .addGap(58, 58, 58))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE))
                .addGap(51, 51, 51)
                .addComponent(jButton4)
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pairwise_Result.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pairwise_Result.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pairwise_Result.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pairwise_Result.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pairwise_Result(path).setVisible(true);
            }
        });
    }
    
    public static void highlight(JTextComponent textComp, String pattern) 
    {

        try 
        {
            Highlighter hilite = textComp.getHighlighter();
            Document doc = textComp.getDocument();
            String text = doc.getText(0, doc.getLength());
            int pos = 0;

            while ((pos = text.indexOf(pattern, pos)) >= 0) 
            {
                hilite.addHighlight(pos, pos + pattern.length(), myHighlightPainter);
                pos += pattern.length();
            }
        } catch (BadLocationException e) { }
    }

    public static void removeHighlights(JTextComponent textComp) 
    {
        Highlighter hilite = textComp.getHighlighter();
        Highlighter.Highlight[] hilites = hilite.getHighlights();

        for (int i = 0; i < hilites.length; i++) {
            if (hilites[i].getPainter() instanceof MyHighlightPainter) 
            {
                hilite.removeHighlight(hilites[i]);
            }
        }
    }
    
    public int ContainElement(int[] arr,int num)
    {
    	int k=0;
    	for(int l=0;l<arr.length;l++)
    	{
    		if(num==arr[l])
    		k=1;
    	}
    	return k;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JEditorPane jEditorPane2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}

class MyHighlightPainter extends DefaultHighlighter.DefaultHighlightPainter {

    public MyHighlightPainter(Color color) {
        super(color);
    }
}
